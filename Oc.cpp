#include "Oc.hpp"

#include "Reg.hpp"

enum {
	OCX_SPACING = 0x80,			//spacing in words
	OCXCON_BASE = 0xBF803000,
		ON = 15,
		SIDL = 13,
		OC32 = 5,
		OCFLT = 4,
		OCTSEL = 3,
		OCM_SHIFT = 0, OCM_MASK = 7,
	OCXR = 4,					//offset from OCXCON in words
	OCXRS = 8					//offset from OCXCON in words
};

//Spi

//=============================================================================
                Oc::Oc          (OCX e)
//=============================================================================
    : m_ocx_con((vu32ptr)OCXCON_BASE + (e * OCX_SPACING))
{
}

//ocxcon
//=============================================================================
    void        Oc::on         	(bool tf)
//=============================================================================
{
    Reg::setbit(m_ocx_con, 1 << ON, tf);
}

//=============================================================================
    void        Oc::sidl        (bool tf)
//=============================================================================
{
    Reg::setbit(m_ocx_con, 1 << SIDL, tf);
}

//=============================================================================
    void        Oc::cp_mode     (CP_MODE e)
//=============================================================================
{
    Reg::setbit(m_ocx_con, 1<<OC32, e);
}

//=============================================================================
    bool        Oc::fault       ()
//=============================================================================
{
	return Reg::anybit(m_ocx_con, 1 << OCFLT);
}

//=============================================================================
    void        Oc::tmr_source	(TMR_SEL e)
//=============================================================================
{
    Reg::setbit(m_ocx_con, 1 << OCTSEL, e);
}

//=============================================================================
    void        Oc::mode		(MODE e)
//=============================================================================
{
    Reg::clrbit(m_ocx_con, OCM_MASK << OCM_SHIFT);
	Reg::setbit(m_ocx_con, e << OCM_SHIFT);
}

//=============================================================================
    void        Oc::r_pri		(uint32_t v)
//=============================================================================
{
    Reg::val(m_ocx_con + OCXR, v);
}

//=============================================================================
    void        Oc::r_sec		(uint32_t v)
//=============================================================================
{
    Reg::val(m_ocx_con + OCXRS, v);
}

