#include "Comp.hpp"
#include "Reg.hpp"

enum {
    CMSTAT = 0xBF802300, //same for all
        SIDL = 1<<13,
        CVREFSEL = 1<<8,
    CM1CON = 0xBF802310, CMXCON_SPACING = 8, //spacing in words
        ON = 1<<15,
        COE = 1<<14,
        CPOL = 1<<13,
        CEVT = 1<<9,
        COUT = 1<<8,
        EVPOL_SHIFT = 6, EVPOL_CLR = 3,
        CREF = 1<<4
};

//=============================================================================
                Comp::Comp              (CMX e)
//=============================================================================
    : m_cmpx_con((volatile uint32_t*)CM1CON + (e * CMXCON_SPACING))
{
}

//=============================================================================
    void        Comp::on                (bool tf)
//=============================================================================
{
    Reg::setbit(m_cmpx_con, ON, tf);
}

//=============================================================================
    void        Comp::out               (bool tf)
//=============================================================================
{
    Reg::setbit(m_cmpx_con, COE, tf);
}

//=============================================================================
    void        Comp::out_inv           (bool tf)
//=============================================================================
{
    Reg::setbit(m_cmpx_con, CPOL, tf);
}

//=============================================================================
    bool        Comp::evt_bit           ()
//=============================================================================
{
    return Reg::anybit(m_cmpx_con, CEVT);
}

//=============================================================================
    bool        Comp::out_bit           ()
//=============================================================================
{
    return Reg::anybit(m_cmpx_con, COUT);
}

//=============================================================================
    void        Comp::evt_sel           (EVPOL e)
//=============================================================================
{
    Reg::clrbit(m_cmpx_con, EVPOL_CLR<<EVPOL_SHIFT);
    Reg::setbit(m_cmpx_con, e<<EVPOL_SHIFT);
}

//=============================================================================
    void        Comp::cref_cxina        (bool tf)
//=============================================================================
{
    Reg::setbit(m_cmpx_con, CREF, not tf);
}

//=============================================================================
    void        Comp::ch_sel            (CCH e)
//=============================================================================
{
    Reg::clrbit(m_cmpx_con, BGAP);
    Reg::setbit(m_cmpx_con, e);
}

//common static functions
//=============================================================================
    void        Comp::stop_idle         (bool tf)
//=============================================================================
{
    Reg::setbit(CMSTAT, SIDL, tf);
}

//=============================================================================
    void        Comp::cref_sel          (CVREF e)
//=============================================================================
{
    Reg::setbit(CMSTAT, CVREFSEL, e);
}
