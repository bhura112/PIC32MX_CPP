#include "Comp.hpp"

//=============================================================================
                Comp::Comp              (CMX e)
//=============================================================================
    : m_cmpx_con((volatile uint32_t*)CM1CON + (e * CMXCON_SPACING))
{
}

//=============================================================================
    void        Comp::on                (bool tf)
//=============================================================================
{
    r.setbit(m_cmpx_con, ON, tf);
}

//=============================================================================
    void        Comp::out               (bool tf)
//=============================================================================
{
    r.setbit(m_cmpx_con, COE, tf);
}

//=============================================================================
    void        Comp::out_inv           (bool tf)
//=============================================================================
{
    r.setbit(m_cmpx_con, CPOL, tf);
}

//=============================================================================
    bool        Comp::evt_bit           ()
//=============================================================================
{
    return r.anybit(m_cmpx_con, CEVT);
}

//=============================================================================
    bool        Comp::out_bit           ()
//=============================================================================
{
    return r.anybit(m_cmpx_con, COUT);
}

//=============================================================================
    void        Comp::evt_sel           (EVPOL e)
//=============================================================================
{
    r.clrbit(m_cmpx_con, EVPOL_CLR<<EVPOL_SHIFT);
    r.setbit(m_cmpx_con, e<<EVPOL_SHIFT);
}

//=============================================================================
    void        Comp::cref_cxina        (bool tf)
//=============================================================================
{
    r.setbit(m_cmpx_con, CREF, not tf);
}

//=============================================================================
    void        Comp::ch_sel            (CCH e)
//=============================================================================
{
    r.clrbit(m_cmpx_con, BGAP);
    r.setbit(m_cmpx_con, e);
}

//common static functions
//=============================================================================
    void        Comp::stop_idle         (bool tf)
//=============================================================================
{
    r.setbit(CMSTAT, SIDL, tf);
}

//=============================================================================
    void        Comp::cref_sel          (CVREF e)
//=============================================================================
{
    r.setbit(CMSTAT, CVREFSEL, e);
}
