#include "Pins.hpp"

//Pins

//=============================================================================
    void        Pins::lowison           (bool tf)
//=============================================================================
{
    m_lowison = tf;
}

//=============================================================================
    void        Pins::digital_in        () const
//=============================================================================
{
    r.setbit(m_pt+TRIS, m_pn);
    r.clrbit(m_pt, m_pn);
}

//=============================================================================
    void        Pins::analog_in         () const
//=============================================================================
{
    r.setbit(m_pt+TRIS, m_pn);
    r.setbit(m_pt, m_pn);
}

//=============================================================================
    void        Pins::digital_out       () const
//=============================================================================
{
    r.clrbit(m_pt+TRIS, m_pn);
    r.clrbit(m_pt, m_pn);
}

//=============================================================================
    void        Pins::odrain            (bool tf) const
//=============================================================================
{
    r.setbit(m_pt+ODC, m_pn, tf);
}

//=============================================================================
    void        Pins::pullup            (bool tf) const
//=============================================================================
{
    r.setbit(m_pt+CNPU, m_pn, tf);
}

//=============================================================================
    void        Pins::pulldn            (bool tf) const
//=============================================================================
{
    r.setbit(m_pt+CNPD, m_pn, tf);
}

//=============================================================================
    void        Pins::icn               (bool tf) const
//=============================================================================
{
    r.setbit(m_pt+CNCON, ON, tf);
}

//=============================================================================
    void        Pins::icn_rising        () const
//=============================================================================
{
    r.setbit(m_pt+CNCON, CNSTYLE);
    r.setbit(m_pt+CNEN0, m_pn);
    r.clrbit(m_pt+CNEN1, m_pn);
}

//=============================================================================
    void        Pins::icn_risefall      () const
//=============================================================================
{
    r.setbit(m_pt+CNCON, CNSTYLE);
    r.setbit(m_pt+CNEN0, m_pn);
    r.clrbit(m_pt+CNEN1, m_pn);
}

//=============================================================================
    void        Pins::icn_falling       () const
//=============================================================================
{
    r.setbit(m_pt+CNCON, CNSTYLE);
    r.setbit(m_pt+CNEN1, m_pn);
    r.clrbit(m_pt+CNEN0, m_pn);
}

//=============================================================================
    void        Pins::icn_mismatch      () const
//=============================================================================
{
    r.setbit(m_pt+CNEN0, m_pn);
    r.clrbit(m_pt+CNCON, CNSTYLE);
}

//=============================================================================
    bool        Pins::icn_flag          () const
//=============================================================================
{
    return r.anybit(m_pt+CNF, m_pn);
}

//=============================================================================
    bool        Pins::icn_stat          () const
//=============================================================================
{
    return r.anybit(m_pt+CNSTAT, m_pn);
}

//static
//unlock, write byte, lock
//=============================================================================
    void        Pins::pps_do            (uint32_t addr, uint8_t v)
//=============================================================================
{
    sys.unlock();
    r.clrbit(RPCON, IOLOCK);
    r.val(addr, v);
    r.setbit(RPCON, IOLOCK);
    sys.lock();
}

//pin -> pps peripheral in, or turn off
//=============================================================================
    void        Pins::pps_in            (PPSIN e)
//=============================================================================
{
    if(m_rpn == 0) return;      //no pps for this pin
    if(e not_eq PPSINOFF) m_ppsin = (uint8_t)e; //save peripheral number
    if(m_ppsin == PPSINOFF) return; //not set previously, nothing to do
    //set peripheral m_ppsin register to 0 if off, or RPn number
    pps_do(RPINR1+((m_ppsin/4)*16)+(m_ppsin%4), e == PPSINOFF ? 0 : m_rpn);
    digital_in();
}

//pps peripheral out -> pin
//=============================================================================
    void        Pins::pps_out           (PPSOUT e)
//=============================================================================
{
    if(m_rpn == 0) return; //no pps for this pin
    uint8_t n = m_rpn-1; //1 based to 0 based to calc reg addresses
    pps_do(RPOR0+((n/4)*16)+(n%4), e);
}

