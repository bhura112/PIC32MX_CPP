#include "Pmd.hpp"
#include "Reg.hpp"
#include "Sys.hpp"

enum {
    PMDCON = 0xBF8035B0,
        PMDLOCK = 11,
    PMD1 = 0xBF8035C0
};

//=============================================================================
    void        Pmd::unlock             ()
//=============================================================================
{
    Sys::unlock();
    Reg::clrbit(PMDCON, 1<<PMDLOCK);
}

//=============================================================================
    void        Pmd::lock               ()
//=============================================================================
{
    Reg::setbit(PMDCON, 1<<PMDLOCK);
    Sys::lock();
}

//=============================================================================
    void        Pmd::off                (PMD e)
//=============================================================================
{
    unlock();
    Reg::setbit(PMD1 + 16 * (e / 32), (1<<(e % 32)));
    lock();
}

//=============================================================================
    void        Pmd::on                 (PMD e)
//=============================================================================
{
    unlock();
    Reg::clrbit(PMD1 + 16 * (e / 32), (1<<(e % 32)));
    lock();
}

//array of modules to disable/enable, END is end of array
//=============================================================================
    void        Pmd::off                (PMD* e)
//=============================================================================
{
    unlock();
    for(; *e not_eq END; e++) Reg::setbit(PMD1 + 16 * (*e / 32), (1<<(*e % 32)));
    lock();
}

//=============================================================================
    void        Pmd::on                 (PMD* e)
//=============================================================================
{
    unlock();
    for(; *e not_eq END; e++) Reg::clrbit(PMD1 + 16 * (*e / 32), (1<<(*e % 32)));
    lock();
}



