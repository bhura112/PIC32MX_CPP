#include "Pmd.hpp"

//=============================================================================
    void        Pmd::unlock             ()
//=============================================================================
{
    sys.unlock();
    r.clrbit(PMDCON, PMDLOCK);
}

//=============================================================================
    void        Pmd::lock               ()
//=============================================================================
{
    r.setbit(PMDCON, PMDLOCK);
    sys.lock();
}

//=============================================================================
    void        Pmd::off                (PMD e)
//=============================================================================
{
    unlock();
    r.setbit(PMD1 + 16 * (e / 32), (1<<(e % 32)));
    lock();
}

//=============================================================================
    void        Pmd::on                 (PMD e)
//=============================================================================
{
    unlock();
    r.clrbit(PMD1 + 16 * (e / 32), (1<<(e % 32)));
    lock();
}

//array of modules to disable/enable, END is end of array
//=============================================================================
    void        Pmd::off                (PMD* e)
//=============================================================================
{
    unlock();
    for(; *e not_eq END; e++) r.setbit(PMD1 + 16 * (*e / 32), (1<<(*e % 32)));
    lock();
}

//=============================================================================
    void        Pmd::on                 (PMD* e)
//=============================================================================
{
    unlock();
    for(; *e not_eq END; e++) r.clrbit(PMD1 + 16 * (*e / 32), (1<<(*e % 32)));
    lock();
}


    
