#include "Adc.hpp"

//ADC1BUFn
//=============================================================================
    uint16_t        Adc::read           (uint8_t n)
//=============================================================================
{
    if(n > ADC1BUF_LAST) n = ADC1BUF_LAST;
    return r.val16(ADC1BUF0 + (n * ADC1BUF_SPACING));
}

//=============================================================================
    uint16_t        Adc::read           ()
//=============================================================================
{
    return r.val16(ADC1BUF0);
}

//ADC1CON1
//=============================================================================
    void            Adc::on             (bool tf)
//=============================================================================
{
    r.setbit(ADC1CON1, ON, tf);
}

//=============================================================================
    void            Adc::stop_idle      (bool tf)
//=============================================================================
{
    r.setbit(ADC1CON1, SIDL, tf);
}

//=============================================================================
    void            Adc::format         (FORM e)
//=============================================================================
{
    r.clrbit(ADC1CON1, FORM_CLR<<FORM_SHIFT);
    r.setbit(ADC1CON1, e<<FORM_SHIFT);
}

//=============================================================================
    void            Adc::trig_sel       (SSRC e)
//=============================================================================
{
    r.clrbit(ADC1CON1, SSRC_CLR<<SSRC_SHIFT);
    r.setbit(ADC1CON1, e<<SSRC_SHIFT);
}

//=============================================================================
    void            Adc::mode_12bit     (bool tf)
//=============================================================================
{
    r.setbit(ADC1CON1, MODE12, tf);
}

//=============================================================================
    void            Adc::samp_auto      (bool tf)
//=============================================================================
{
    r.setbit(ADC1CON1, ASAM, tf);
}

//=============================================================================
    void            Adc::samp           (bool tf)
//=============================================================================
{
    r.setbit(ADC1CON1, SAMP, tf);
}

//=============================================================================
    bool            Adc::samp           ()
//=============================================================================
{
    return r.anybit(ADC1CON1, SAMP);
}

//=============================================================================
    bool            Adc::done           ()
//=============================================================================
{
    return r.anybit(ADC1CON1, DONE);
}

//ADC1CON2
//=============================================================================
    void            Adc::vref_cfg       (VCFG e)
//=============================================================================
{
    r.clrbit(ADC1CON2, VCFG_CLR<<VCFG_SHIFT);
    r.setbit(ADC1CON2, e<<VCFG_SHIFT);
}

//=============================================================================
    void            Adc::offset_cal     (bool tf)
//=============================================================================
{
    r.setbit(ADC1CON2, OFFCAL, tf);
}

//=============================================================================
    void            Adc::buf_reg        (bool tf)
//=============================================================================
{
    r.setbit(ADC1CON2, BUFREGEN, tf);
}

//=============================================================================
    void            Adc::scan           (bool tf)
//=============================================================================
{
    r.setbit(ADC1CON2, CSCNA, tf);
}

//=============================================================================
    bool            Adc::buf2nd_busy    ()
//=============================================================================
{
    return r.anybit(ADC1CON2, BUFS);
}

//=============================================================================
    void            Adc::samp_nirq      (uint8_t n)
//=============================================================================
{
    n -= 1; n and_eq 15; //n = 1-16 ->0-15
    r.clrbit(ADC1CON2, SMPI_CLR<<SMPI_SHIFT);
    r.setbit(ADC1CON2, n<<SMPI_SHIFT);
}

//=============================================================================
    void            Adc::buf_split      (bool tf)
//=============================================================================
{
    r.setbit(ADC1CON2, BUFM, tf);
}

//ADC1CON3
//=============================================================================
    void            Adc::clk_src        (CLK e)
//=============================================================================
{
    r.setbit(ADC1CON3, ADRC, e);
}

//=============================================================================
    void            Adc::samp_extend    (bool tf)
//=============================================================================
{
    r.setbit(ADC1CON3, EXTSAM, tf);
}

//=============================================================================
    void            Adc::samp_time      (uint8_t v)
//=============================================================================
{
    v and_eq 31; v = v == 0 ? 1 : v; //0 not allowed (1-31)
    r.clrbit(ADC1CON3, SAMC_CLR<<SAMC_SHIFT);
    r.setbit(ADC1CON3, v<<SAMC_SHIFT);
}

//default value is for 24MHz, 4 will meet 280ns Tad for any clock
//=============================================================================
    void            Adc::conv_time      (uint8_t v)
//=============================================================================
{
    r.val(ADC1CON3, v);
}

//ADC1CON5
//=============================================================================
    void            Adc::scan_auto      (bool tf)
//=============================================================================
{
    r.setbit(ADC1CON5, ASEN, tf);
}

//=============================================================================
    void            Adc::low_power      (bool tf)
//=============================================================================
{
    r.setbit(ADC1CON5, LPEN, tf);
}

//=============================================================================
    void            Adc::bandgap        (bool tf)
//=============================================================================
{
    r.setbit(ADC1CON5, BGREQ, tf);
}

//=============================================================================
    void            Adc::scan_autoirq   (ASINT e)
//=============================================================================
{
    r.clrbit(ADC1CON5, ASINT_CLR<<ASINT_SHIFT);
    r.setbit(ADC1CON5, e<<ASINT_SHIFT);
}

//=============================================================================
    void            Adc::write_mode     (WM e)
//=============================================================================
{
    r.clrbit(ADC1CON5, WM_CLR<<WM_SHIFT);
    r.setbit(ADC1CON5, e<<WM_SHIFT);
}

//=============================================================================
    void            Adc::compare_mode   (CM e)
//=============================================================================
{
    r.clrbit(ADC1CON5, CM_CLR<<CM_SHIFT);
    r.setbit(ADC1CON5, e<<CM_SHIFT);
}

//ADC1CHS
//=============================================================================
    void            Adc::ch_sel         (CH0SA e)
//=============================================================================
{
    r.val(ADC1CHS, e);
}

//=============================================================================
    void            Adc::ch_sel         (uint8_t v)
//=============================================================================
{
    r.val(ADC1CHS, v);
}

//ADC1SS
//=============================================================================
    void            Adc::ch_scan        (CH0SA e, bool tf)
//=============================================================================
{
    r.setbit(ADC1CSS, e, tf);
}

//=============================================================================
    void            Adc::ch_scan        (CH0SA* e)
//=============================================================================
{
    r.val(ADC1CSS, 0); //clr all
    for(; *e not_eq END; e++) r.setbit(ADC1CSS, 1<<*e); //set list
}

//=============================================================================
    void            Adc::ch_scan        (uint32_t v)
//=============================================================================
{
    r.val(ADC1CSS, v);
}

//ADC1CHIT
//non AN values will return 0 (like VDD)
//=============================================================================
    bool            Adc::ch_hit         (CH0SA e)
//=============================================================================
{
    return r.anybit(ADC1CHIT, 1<<e);
}

//=============================================================================
    uint32_t        Adc::ch_hit         ()
//=============================================================================
{
    return r.val(ADC1CHIT);
}
