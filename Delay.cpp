#include "Delay.hpp"
#include "Cp0.hpp"
#include "Osc.hpp"

//Delay functions

//=============================================================================
    bool        Delay::expired              ()
//=============================================================================
{
    if((Cp0::count() - m_start) >= m_countn) m_expired = true;
    return m_expired;
}

//=============================================================================
    void        Delay::restart              ()
//=============================================================================
{
    m_start = Cp0::count();
    m_expired = false;
}

//=============================================================================
    void        Delay::set_us               (uint32_t n)
//=============================================================================
{
    if(n > 300000000) n = 300000000;
    set_count(n);
}

//=============================================================================
    void        Delay::set_ms               (uint32_t n)
//=============================================================================
{
    if(n > 300000) n = 300000;
    set_us(1000 * n);
}

//=============================================================================
    void        Delay::set_s                (uint16_t n)
//=============================================================================
{
    if(n > 300) n = 300;
    set_ms(1000 * n);
}

//private
//=============================================================================
    void        Delay::set_count            (uint32_t n)
//=============================================================================
{
    restart();
    m_countn = Osc::sysclk() / 2000000 * n;
}

//static
//=============================================================================
    void        Delay::wait_us              (uint32_t n)
//=============================================================================
{
    if(n > 300000000) n = 300000000;
    n = Osc::sysclk() / 2000000 * n;
    uint32_t start = Cp0::count();
    while((Cp0::count() - start) < n);
}

//=============================================================================
    void        Delay::wait_ms              (uint32_t n)
//=============================================================================
{
    if(n > 300000) n = 300000;
    wait_us(1000 * n);
}

//=============================================================================
    void        Delay::wait_s               (uint16_t n)
//=============================================================================
{
    if(n > 300) n = 300;
    wait_ms(1000 * n);
}