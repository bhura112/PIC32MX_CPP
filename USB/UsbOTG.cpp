//USB OTG (Host)

#include <cstdint>
#include "UsbOTG.hpp"
#include "Reg.hpp"

//registers - all use only first 8bits
enum {
    U1OTGIR = 0xBF808440,   //no SET, INV - all bits write-1-to-clear
    U1OTGIE = 0xBF808450,
    U1OTGSTAT = 0xBF808460, //no SET, INV, CLR
    U1OTGCON = 0xBF808470,
    U1ADDR = 0xBF808660,
        LSEN = 7,
    U1TOK = 0xBF8086A0,
    U1SOF = 0xBF8086B0,
 };

//=============================================================================
    uint8_t     UsbOTG::flags           ()
//=============================================================================
{
    return (UsbOTG::FLAGSOTG)Reg::val(U1OTGIR);
}

//=============================================================================
    bool        UsbOTG::flag            (FLAGSOTG e)
//=============================================================================
{
    return Reg::anybit(U1OTGIR, e);
}

//=============================================================================
    void        UsbOTG::flags_clr       ()
//=============================================================================
{
    Reg::val(U1OTGIR, 255);
}

//=============================================================================
    void        UsbOTG::flags_clr       (uint8_t v)
//=============================================================================
{
    Reg::val(U1OTGIR, v);
}

//=============================================================================
    void        UsbOTG::flag_clr        (FLAGSOTG e)
//=============================================================================
{
    Reg::val(U1OTGIR, e);
}

//=============================================================================
    uint8_t     UsbOTG::irqs            ()
//=============================================================================
{
    return Reg::val(U1OTGIR);
}

//=============================================================================
    bool        UsbOTG::irq             (FLAGSOTG e)
//=============================================================================
{
    return Reg::anybit(U1OTGIR, e);
}

//=============================================================================
    void        UsbOTG::irqs_clr        ()
//=============================================================================
{
    Reg::val(U1OTGIR, 255);
}

//=============================================================================
    void        UsbOTG::irqs_clr        (uint8_t v)
//=============================================================================
{
    Reg::val(U1OTGIR, v);
}

//=============================================================================
    void        UsbOTG::irq_clr         (FLAGSOTG e)
//=============================================================================
{
    Reg::val(U1OTGIR, e);
}

//=============================================================================
    uint8_t     UsbOTG::stat            ()
//=============================================================================
{
    return Reg::val(U1OTGSTAT);
}

//=============================================================================
    bool        UsbOTG::stat            (FLAGSOTG e)
//=============================================================================
{
    return Reg::anybit(U1OTGSTAT, e);
}

//=============================================================================
    void        UsbOTG::otg             (OTG e, bool tf)
//=============================================================================
{
    Reg::setbit(U1OTGCON, e, tf);
}

//=============================================================================
    void        UsbOTG::otg             (uint8_t v)
//=============================================================================
{
    Reg::val8(U1OTGCON, v);
}

//=============================================================================
    void        UsbOTG::low_speed       (bool tf)
//=============================================================================
{
    Reg::setbit(U1ADDR, 1<<LSEN, tf);
}

//=============================================================================
    uint8_t     UsbOTG::tok_pid         (TOKPID e)
//=============================================================================
{
    Reg::val8(U1TOK, e<<4);
}

//=============================================================================
    void        UsbOTG::tok_ep          (uint8_t v)
//=============================================================================
{
    Reg::clrbit(U1TOK, 15);
    Reg::setbit(U1TOK, v bitand 15);
}

//=============================================================================
    void        UsbOTG::sof_cnt         (SOFVALS e)
//=============================================================================
{
    Reg::val(U1SOF, e);
}
