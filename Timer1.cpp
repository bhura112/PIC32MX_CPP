#include "Timer1.hpp"
#include "Osc.hpp"
#include "Reg.hpp"

enum {
    //T1CON
        ON = 1<<15,
        SIDL = 1<<13,
        TWDIS = 1<<12,
        TWIP = 1<<11,
        TGATE = 1<<7,
        TCKPS_SHIFT = 4, TCKPS_CLR = 3,
        TSYNC = 1<<2,
        CLK_CLR = (3<<8) | (1<<1),
    TMR1 = 0xBF808010,
    PR1 = 0xBF808020
};


//=============================================================================
    void        Timer1::timer           (uint16_t n)
//=============================================================================
{
    Reg::val(TMR1, n);
}

//=============================================================================
    uint16_t    Timer1::timer           ()
//=============================================================================
{
    return Reg::val16(TMR1);
}

//=============================================================================
    void        Timer1::period          (uint16_t n)
//=============================================================================
{
    Reg::val(PR1, n);
}

//=============================================================================
    uint16_t    Timer1::period          ()
//=============================================================================
{
    return Reg::val16(PR1);
}

//=============================================================================
    void        Timer1::on              (bool tf)
//=============================================================================
{
    Reg::setbit(T1CON, ON, tf);
}

//=============================================================================
    void        Timer1::stop_idle       (bool tf)
//=============================================================================
{
    Reg::setbit(T1CON, SIDL, tf);
}

//=============================================================================
    void        Timer1::wr_async        (bool tf)
//=============================================================================
{
    Reg::setbit(T1CON, TWDIS, not tf);
}

//=============================================================================
    bool        Timer1::wr_busy         ()
//=============================================================================
{
    return Reg::anybit(T1CON, TWIP);
}

//=============================================================================
    void        Timer1::clk_src         (CLK e)
//=============================================================================
{
    if(e == SOSC) Osc::sosc(true);
    Reg::clrbit(T1CON, CLK_CLR);
    Reg::setbit(T1CON, e);
}

//=============================================================================
    void        Timer1::tgate           (bool tf)
//=============================================================================
{
    Reg::setbit(T1CON, TGATE, tf);
}

//=============================================================================
    void        Timer1::prescale        (TCKPS e)
//=============================================================================
{
    Reg::clrbit(T1CON, TCKPS_CLR<<TCKPS_SHIFT);
    Reg::setbit(T1CON, e<<TCKPS_SHIFT);
}

//=============================================================================
    void        Timer1::tsync           (bool tf)
//=============================================================================
{
    Reg::setbit(T1CON, TSYNC, tf);
}

